{"version":3,"sources":["components/Header.js","components/LoginViaSmsPage.js","components/EnterPage.js","components/LoadingPage.js","routers/AppRouter.js","serviceWorker.js","index.js","images/Zofim-logo.png"],"names":["Header","className","src","logo","alt","LoginViaSmsPage","disabled","placeholder","EnterPage","LoadingPage","AppRouter","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+OAWeA,EARA,kBACX,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,SACrC,oICuBOI,EA3BS,kBACpB,yBAAKJ,UAAU,aACX,gMACA,yBAAKA,UAAU,iBACX,wFACA,gCACA,wFACA,yBAAKA,UAAU,cACX,gCACA,4BAAQK,UAAU,GAAlB,gDAEJ,mDACA,2BACIC,YAAY,yHACZD,UAAU,IAGd,4BACIL,UAAU,eACVK,UAAU,GAFd,qCCFGE,EAfG,kBACd,yBAAKP,UAAU,aACX,kIACA,gEACA,gCACA,+DACA,gCACA,mDACA,gCACA,+DACA,gCACA,4BAAQA,UAAU,gBAAlB,oCCHOQ,EAPK,kBAChB,yBAAKR,UAAU,YACX,+IACA,yBAAKC,IAAKC,IAAMC,IAAI,WCebM,EAdI,kBACd,kBAAC,IAAD,KACG,yBAAMT,UAAU,kBACZ,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOU,KAAK,IAAIC,UAAWP,EAAiBQ,OAAO,IACnD,kBAAC,IAAD,CAAOF,KAAK,MAAMC,UAAWJ,IAC7B,kBAAC,IAAD,CAAOG,KAAK,MAAMC,UAAWH,IAC7B,kBAAC,IAAD,CAAOG,UAAWH,QCHdK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.a19991aa.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../images/Zofim-logo.png';\n\nconst Header = () => (\n    <div className=\"header\">\n        <img src={logo} alt=\"Logo\" className=\"logo\"/>\n        <h1>תהליך הערכת עובדים</h1>\n        \n    </div>\n);\n\nexport default Header;","import React from 'react';\n\nconst LoginViaSmsPage = () => (\n    <div className=\"container\">\n        <h2>התחברות לאזור אישי באמצעות סמס</h2>\n        <div className=\"sub-container\">\n            <p>תעודת זהות *</p>\n            <input />\n            <p>טלפון נייד *</p>\n            <div className=\"code-input\">\n                <input />\n                <button disabled={false}>קבלת קוד</button>\n            </div>\n            <p>קוד *</p>\n            <input \n                placeholder=\"יש להזין את הקוד שקיבלת\"\n                disabled={true}\n            />\n            \n            <button \n                className=\"login-button\"\n                disabled={true}\n            >\n                כניסה\n            </button>\n        </div>\n    </div>\n);\n\nexport default LoginViaSmsPage; ","import React from 'react';\n\nconst EnterPage = () => (\n    <div className=\"container\">\n        <h2>הפרטים האישיים שלי</h2>\n        <p>שם מלא *</p>\n        <input />\n        <p>הנהגה *</p>\n        <input />\n        <p>שבט *</p>\n        <input />\n        <p>תפקיד *</p>\n        <input />\n        <button className=\"login-button\">אישור</button>\n    </div>\n);\n\nexport default EnterPage;","import React from 'react';\nimport logo from '../images/Zofim-logo.png';\n\nconst LoadingPage = () => (\n    <div className=\"backdrop\">\n        <h1>הודעת הטקסט בדרך אליך</h1>\n        <img src={logo} alt=\"Logo\" />\n    </div>\n);\n\nexport default LoadingPage;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Header from '../components/Header';\nimport LoginViaSmsPage from '../components/LoginViaSmsPage';\nimport EnterPage from '../components/EnterPage';\nimport LoadingPage from '../components/LoadingPage';\n\n const AppRouter = () => (\n     <BrowserRouter>\n        <div  className=\"main_container\">\n            <Header />\n            <Switch>\n                <Route path=\"/\" component={LoginViaSmsPage} exact={true} />\n                <Route path=\"/01\" component={EnterPage} />\n                <Route path=\"/02\" component={LoadingPage}  />\n                <Route component={LoadingPage} />\n            </Switch>\n        </div>\n     </BrowserRouter>\n );\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport AppRouter from './routers/AppRouter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Zofim-logo.241f2f03.png\";"],"sourceRoot":""}